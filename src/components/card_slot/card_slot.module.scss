@use '../constants.module.scss';

$usedAnimationDuration: 400ms;

.container {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-items: start;
  height: calc(constants.$cardHeight * 2.5);
  gap: 2%;
}

.target-card {
  width: constants.$cardWidth;
  height: constants.$cardHeight;
}

.target-card.bordered {
  border: .1vw solid #422;
  border-radius: constants.$cardBorderRadius;
}

.target-card.none {
  cursor: default;
}

.target-card.draggable {
  cursor: grab;
}

.target-card.dragging {
  cursor: grabbing;
}

.target-card.clickable {
  cursor: pointer;
}

.target-card.immovable {
  cursor: not-allowed;
}

.target-card.no-drop {
  cursor: no-drop;
}

.target-card.drop {
  cursor: pointer;
}

.target-card.long-press {
  cursor: pointer;
}

.target-card.long-pressing {
  cursor: grabbing;
}

.played-cards {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-items: start;
  transform-origin: calc(constants.$cardWidth/2) calc(constants.$cardHeight/2);
  transition: transform $usedAnimationDuration ease-in-out;
}

.played-cards.used {
  transform: translateY(calc(constants.$cardHeight/-1)) rotateZ(90deg);
}

.played-card {
  margin-bottom: calc(-.75 * constants.$cardHeight);
  transition: margin-bottom $usedAnimationDuration ease-in-out;
}

.played-card.used {
  margin-bottom: calc(-1 * constants.$cardHeight);
}

@for $i from 1 through 3 {
  .played-card:nth-child(#{$i}) {
    transform: translateZ(calc(#{$i}vw * 0.2));
  }
}


