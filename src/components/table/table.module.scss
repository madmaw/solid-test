@use 'components/constants.module.scss';

@value tableWidth: 200;
$tableWidth: calc(tableWidth * 1vmin);
@value tableHeight: 200;
$tableHeight: calc(tableHeight * 1vmin);

@value bookWidth: pageWidth;
$bookWidth: constants.$pageWidth;
@value bookHeight: pageHeight;
$bookHeight: constants.$pageHeight;
@value bookTop: 10;
$bookTop: calc(bookTop * 1vmin);

$handSlotTop: 20vmin;
@value handSlotTop: 20;
$handSlotWidth: 80vmin;
@value handSlotWidth: 80;
$handSlotHeight: constants.$cardHeight;
@value handSlotHeight: cardHeight;

@value overlayZ: 27;
$overlayZ: calc(overlayZ * 1vmin); 

$tableColor: #763F13;
$tableColorDark: #221100;

.container {
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.room {
  position: absolute;
  perspective: 80vmin;
  perspective-origin: 50% 50%;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  //transition-property: transform;
  //transition-timing-function: ease-in-out;
  //transition-duration: 100ms;
}

.room * {
  transform-style: preserve-3d;
}

.table {
  background: $tableColor;
  position: absolute;
  width: $tableWidth;
  height: $tableHeight;
  transform-origin: calc($tableWidth/2) $tableHeight;
  transition: transform 1s ease-in-out;
  pointer-events: all;
  bottom: 0;
  left: calc((100vw - $tableWidth)/2);
}

.table.topDown {
  background: linear-gradient($tableColorDark, $tableColor);
  transform:
      rotateX(20deg)
      translate(0, calc($tableHeight - $bookHeight - $bookTop - $handSlotTop));
      //translateZ(calc(-1 * $tableWidth));
}

.table.topDownBookCentered {
  background: linear-gradient($tableColorDark, $tableColor);
  transform:
      rotateX(0deg)
      translate(calc(-1 * ($bookWidth / 2)), calc($tableHeight - $bookHeight - $bookTop - $handSlotTop))
      translateZ(-10vmin)
      ;
}

.table.tilted {
  background: linear-gradient($tableColorDark, $tableColor);
  transform:
      rotateX(constants.$tableTiltAngle)
      translate(0, calc($tableHeight - $bookHeight - $bookTop - $handSlotTop * 2))
      translateZ(30vmin)
      ;
}

.book {
  position: absolute;
  top: $bookTop;
  left: 50%;
  width: $bookWidth;
  height: $bookHeight;
  background-color: brown;
}

.hand {
  position: absolute;
  display: flex;
  top: calc($bookTop + $bookHeight + $handSlotTop);
  left: calc((100% - $handSlotWidth) / 2);
  width: $handSlotWidth;
  height: $handSlotHeight;
}

.deck {
  position: absolute;
  top: calc($bookTop + $bookHeight + $handSlotTop);
  left: calc(50% - $handSlotWidth/2 - 10vmin);
  width: constants.$cardWidth;
  height: constants.$cardHeight;
}

.spread-overlay {
  position: absolute;
  top: calc($bookTop + $bookHeight);
  left: calc($tableWidth/2 - $bookWidth/2);
  width: calc($bookWidth);
  height: constants.$cardHeight;
  transform: translateZ(calc($overlayZ)) rotateX(constants.$tableTiltCorrectionAngle);
  transform-origin: top;
}

.drag-overlay, .status-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

